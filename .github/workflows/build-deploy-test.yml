name: Build and Deploy Code

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2
        
      # Set up Docker and Docker Compose
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify Docker Compose installation
  test:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.tests.outcome }}
    environment:
      name: fastapi-social-media-testing
    env:
      POSTGRES_USER: ${{vars.POSTGRES_USER}}
      POSTGRES_HOST: ${{vars.POSTGRES_HOST}}
      POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
      POSTGRES_DB: ${{vars.POSTGRES_DB}}
      POSTGRES_PORT: ${{vars.POSTGRES_PORT}}
      PGADMIN_DEFAULT_EMAIL: ${{vars.PGADMIN_DEFAULT_EMAIL}}
      PGADMIN_DEFAULT_PASSWORD: ${{secrets.PGADMIN_DEFAULT_PASSWORD}}
      JWT_SECRET_KEY: ${{secrets.JWT_SECRET_KEY}}
      JWT_SECRET_KEY_EXPIRE_MINUTES: ${{vars.JWT_SECRET_KEY_EXPIRE_MINUTES}}
      JWT_ALGORITHM: ${{vars.JWT_ALGORITHM}}
      ENV: ${{vars.ENV}}

    steps:
      - name: Set up Python version 3.12
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Update pip
        run: python -m pip install --upgrade pip

      # Create .env.test file dynamically from GitHub Secrets
      - name: Create .env.test file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.test
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.test
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.test
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env.test
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env.test
          echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> .env.test
          echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> .env.test
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env.test
          echo "JWT_SECRET_KEY_EXPIRE_MINUTES=${{ secrets.JWT_SECRET_KEY_EXPIRE_MINUTES }}" >> .env.test
          echo "JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}" >> .env.test
          echo "ENV=${{ secrets.ENV }}" >> .env.test

      - name: Set up Docker Compose and start services
        run: |
          # Set up Docker Compose and start the services defined in docker-compose-test.yaml
          docker-compose -f docker-compose-test.yaml up -d

      - name: Run tests inside the social_media_api container
        run: |
          # Wait for the services to be ready (if necessary)
          docker-compose -f docker-compose-test.yaml exec social_media_api printenv
          docker-compose -f docker-compose-test.yaml exec social_media_api pytest -v -s --disable-warnings -x --cov=app --cov-report term-missing tests/

  build_and_push:
    needs: [test, setup]
    runs-on: ubuntu-latest
    if: ${{ needs.test.outputs.tests-passed == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and Push Docker Image with Cache
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/fastapi-social_media_api:latest
          cache-from: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/fastapi-social_media_api:buildcache
          cache-to: type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/fastapi-social_media_api:buildcache,mode=max
          
  cleanup:
    needs: [build_and_push, setup]
    runs-on: ubuntu-latest
    if: ${{ always() }}  # This ensures cleanup happens regardless of the success or failure of the previous jobs
    steps:
      - name: Stop and Remove Docker Containers
        run: |
          echo "Stopping Docker containers..."
          docker-compose -f docker-compose-test.yaml down --volumes --remove-orphans

      - name: Clean up Docker system
        run: |
          echo "Pruning Docker system..."
          docker system prune -f
      
      